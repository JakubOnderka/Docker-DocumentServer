### This workflow setup instance then build and push images ###
name: Multi-arch build stable

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag for release (ex. 1.2.3.45)'
        type: string
        required: true
      release_number:
        description: 'Sequence number of the release (ex. x.x.x.<number>)'
        type: string
        required: false

env:
  COMPANY_NAME: "onlyoffice"
  PRODUCT_NAME: "documentserver" 

jobs:
  build-info:
    name: build-info
    runs-on: ubuntu-latest
    outputs:
      release-number: ${{ steps.get-release.outputs.release-number }}
    steps:
      - name: Get release number
        id: get-release
        env:
          RELEASE_NUMBER: "${{ github.event.inputs.release_number }}"
          REGISTRY_URL: "https://hub.docker.com/v2/repositories"
          TAG: "${{ github.event.inputs.tag }}"
        run: |
          if [ "${RELEASE_NUMBER}" != "" ]; then
             echo "==================================================="
             echo "ATTENTION: The release number was declared manualy."
             echo "==================================================="

             echo "release-number=${RELEASE_NUMBER}" >> "$GITHUB_OUTPUT"
          else
             echo "==================================================================================="
             echo "The release number was not manually announced. Set release number by automaticaly.."
             echo "==================================================================================="

             # Get release number automaticaly. Release gets +1 from previous release
             LAST_RELEASE=($(curl -s -H -X ${REGISTRY_URL}/${COMPANY_NAME}/${PRODUCT_NAME}/tags/?page_size=100 | \
                            jq -r '.results|.[]|.name' | grep -m 1 -Eo "${TAG%.*}.[0-9]{1,}" || true))
                 if [ -z "${LAST_RELEASE}" ]; then
                        echo "========================================="
                        echo "This is first release with this minor tag"
                        echo "========================================="
                        NEW_RELEASE="1"
                 else
                        LAST_RELEASE_NUMBER=${LAST_RELEASE#*.*.*.}
                        NEW_RELEASE=$((LAST_RELEASE_NUMBER+1))
                 fi

                 echo "release-number=${NEW_RELEASE}" >> "$GITHUB_OUTPUT"
          fi

  build:
    name: "Release image: DocumentServer${{ matrix.edition }}"
    needs: [build-info]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        images: ["documentserver-stable"]
        edition: ["", "-ee", "-de"]
    steps:
      - name: Checkout code 
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
     
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build documentserver-release
        run: |
          set -eux
          VERSION=${{ github.event.inputs.tag }}
          RELEASE_NUMBER=${{ needs.build-info.outputs.release-number }}
          PRODUCT_EDITION=${{ matrix.edition }}
          TESTING_IMAGE=${COMPANY_NAME}/4testing-${PRODUCT_NAME}${PRODUCT_EDITION}
            export PRODUCT_EDITION
            export PULL_TAG=${VERSION}
            export TAG=${VERSION%.*}.${RELEASE_NUMBER}
            export SHORTER_TAG=${VERSION%.*}
            export SHORTEST_TAG=${VERSION%.*.*}
            docker buildx bake -f docker-bake.hcl ${{ matrix.images }} --push
            echo "DONE: Build success >> exit with 0"
            exit 0
        shell: bash

  build-nonexample:
    name: "Release image: DocumentServer${{ matrix.edition }}-nonExample"
    runs-on: ubuntu-latest
    needs:
      - build
      - build-info
    if: ${{ false }}
    strategy:
      fail-fast: false
      matrix:
        images: ["documentserver-nonexample"]
        edition: ["", "-ee", "-de"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: build image
        run: |
          set -eux
          VERSION=${{ github.event.inputs.tag }}
          RELEASE_NUMBER=${{ needs.build-info.outputs.release-number }}
          export PULL_TAG=${VERSION%.*}.${RELEASE_NUMBER}
          export PRODUCT_EDITION=${{ matrix.edition }}
          export TAG=${VERSION%.*}.${RELEASE_NUMBER}
          docker buildx bake -f docker-bake.hcl ${{ matrix.images }} --push
        shell: bash

  build-ucs-ubuntu20:
    name: "Release image: DocumentServer${{ matrix.edition }}-ucs"
    needs: [build-info]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        edition: ["", "-ee"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: build UCS
        run: |
           set -eux
           VERSION=${{ github.event.inputs.tag }}
           RELEASE_NUMBER=${{ needs.build-info.outputs.release-number }}
           export PRODUCT_EDITION=${{ matrix.edition }}
           export PACKAGE_BASEURL=${{ secrets.REPO_BASEURL }}
           export DOCKERFILE=Dockerfile
           export BASE_IMAGE=ubuntu:20.04
           export PG_VERSION=12
           export TAG=${VERSION%.*}.${RELEASE_NUMBER}
           export PACKAGE_VERSION=$( echo ${VERSION} |  sed -E 's/(.*)\./\1-/')
           docker buildx bake -f docker-bake.hcl documentserver-ucs --push
        shell: bash
